import os
import sys
import argparse

from groq import Groq
from rich import print
from dotenv import load_dotenv


template_user_message = """
TITLE:
{TITLE}

CONTEXT:
BEGIN_STAGED_DIFF
{CONTEXT}
END_STAGED_DIFF
"""

prompt_summary = """
You are a highly skilled software developer responsible for summarizing recent changes in the codebase. The goal is to create a detailed and informative summary.

Inputs:
-   **TITLE**: The initial Spanish commit message summarizing intended changes.
-   **CONTEXT**: A git diff representing the files and code modifications involved.

Your task is to generate a summary that:

1. Focuses strictly on the information provided in the TITLE and CONTEXT.
2. Includes a clear overview of all major changes, emphasizing tools, technologies, and important keywords.
3. Lists specific changes and their purposes, such as added lines for error prevention or new string handling methods.

**Critical Guidelines:**
-   Do not add, assume, or infer information not present in the provided TITLE and CONTEXT.
-   Ensure the summary includes practical impacts of the changes, specifying the reasons for each modification.
-   Maintain clarity and conciseness, structuring the summary as a coherent paragraph.

The summary should effectively inform other team members about the changes, highlighting key aspects, impacts, and the reasons behind each modification. Deliver a factual analysis based on the provided inputs.
"""

prompt_commit_message = """
As an expert software developer, your task is to create an English commit message with a structured title and body based on the following summary of code changes. The provided input is:

-   **SUMMARY**: This is a concise description summarizing the major changes. It focuses on the actions taken, tools, technologies, and keywords involved, as well as any file names, functions, or methods altered, and their purposes and impacts.

Your output should follow this structured format:

1. First Line: A concise title (<=130 characters) summarizing the changes. Do not include any prefixes.
2. Second Line: A single blank line (exactly one newline).
3. Following Lines: A detailed body (<=130 characters per line) explaining what was done and why.

Rules and Guidelines:

-   You MUST use the SUMMARY to create both the title and the body.
-   Ensure the title is a keyword-rich summary of the changes.
-   The body should explain the changes, their purpose, and their impact in detail.
-   Do not invent or infer content not present in the SUMMARY.
-   Adhere to standard commit message practices.
"""

prompt_output_format = """
Your task is to take the English commit message generated by the previous step and ensure it adheres to the exact format required for a commit message. The inputs provided are:

-    **TITLE**: The generated English commit title (a concise summary using keywords, without any preamble).
-    **BODY**: The generated English commit body.

Your output should be a single string that exactly matches the following format:

1. First Line: English commit title (single line, <=130 characters), using sentence case (only the first word capitalized).
2. Second Line: A single blank line (exactly one newline).
3. Following Lines: Commit body text (may be one or more paragraphs), wrapped to <=130 characters per line.

Rules and Guidelines:

-    Ensure the title uses sentence case, with only the first word and proper nouns capitalized.
-    Ensure the title is on the first line, followed by a single blank line.
-    The body should start on the next line, maintaining the <=130 characters per line limit.
-    The entire output should be a single string, with no extra whitespace or blank lines.
-    Adhere to standard commit message formatting practices.
-    The title MUST NOT include any prefixes or introductory phrases.
"""


# ---------------------------------------------------------
# HELPERS
# ---------------------------------------------------------
def translate_commit_message(commit_message: str, staged_diff: str) -> str:
    dotenv_path = os.path.expanduser('~/dotfiles/python/.env')
    load_dotenv(dotenv_path)

    client = Groq(
        api_key=os.environ.get('GROQ_API_KEY'),
    )

    user_message = template_user_message.replace('{TITLE}', commit_message).replace(
        '{CONTEXT}', staged_diff
    )

    try:
        summary = client.chat.completions.create(
            messages=[
                {
                    'role': 'system',
                    'content': prompt_summary,
                },
                {'role': 'user', 'content': user_message},
            ],
            model='gemma2-9b-it',
        )
        summary_output = summary.choices[0].message.content
        if summary_output is None:
            raise ValueError('Received None instead of a valid translated message.')

        commit = client.chat.completions.create(
            messages=[
                {
                    'role': 'system',
                    'content': prompt_commit_message,
                },
                {'role': 'user', 'content': summary_output},
            ],
            model='gemma2-9b-it',
        )
        commit_output = commit.choices[0].message.content
        if commit_output is None:
            raise ValueError('Received None instead of a valid translated message.')

        format = client.chat.completions.create(
            messages=[
                {
                    'role': 'system',
                    'content': prompt_output_format,
                },
                {'role': 'user', 'content': commit_output},
            ],
            model='gemma2-9b-it',
        )
        format_output = format.choices[0].message.content

        if format_output is None:
            raise ValueError('Received None instead of a valid translated message.')

        if format_output.startswith('"') and format_output.endswith('"'):
            format_output = format_output[1:-1]

        return format_output

    except Exception as e:
        print(f'[red]Error translating commit message: {e}[/red]')
        sys.exit(1)


def main():
    parser = argparse.ArgumentParser(
        description='Translate Git commit messages from Spanish to English.'
    )
    parser.add_argument('message', type=str, help='The commit message to translate')
    parser.add_argument(
        'context', nargs='?', default='', help='Optional staged diff text'
    )

    args = parser.parse_args()
    translated_message = translate_commit_message(
        commit_message=args.message, staged_diff=args.context
    )
    print(translated_message)


if __name__ == '__main__':
    main()
